
import groovy.io.FileType

import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec


apply plugin: 'com.android.application'

ext {
    byte[] key = new byte[16]
    new Random().nextBytes(key)
    KEY = key
    byte[] iv = new byte[16]
    new Random().nextBytes(iv)
    IV_KEY = iv
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.slimroms.myapplication"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "IV_KEY", "\"" + IV_KEY + "\""
        buildConfigField "byte[]", "DECRYPTION_KEY", String.valueOf("\"" + KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
        buildConfigField "byte[]", "IV_KEY", String.valueOf("\"" + IV_KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets-encrypted']
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'commons-io:commons-io:2.4'
    testCompile 'junit:junit:4.12'
}

task encryptAssets {

    File encryptedAssets = new File(getProjectDir(), "/src/main/assets-encrypted")
    if (encryptedAssets.exists())
        encryptedAssets.delete()

    def list = []

    def dir = new File(getProjectDir(), "/src/main/assets")
    dir.eachFileRecurse (FileType.FILES) { file ->
        list << file
    }

    list.each {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
        SecretKey secret = new SecretKeySpec(KEY, "AES")
        IvParameterSpec iv = new IvParameterSpec(IV_KEY);

        cipher.init(Cipher.ENCRYPT_MODE, secret, iv)
        String path = it.getAbsolutePath().replace("assets", "assets-encrypted")
        File outFile = new File (path + ".enc")
        if (outFile.exists()) {
            outFile.delete()
        }
        outFile.getParentFile().mkdirs()
        FileInputStream fis = new FileInputStream(it)
        FileOutputStream fos = new FileOutputStream(path + ".enc")

        byte[] input = new byte[64]
        int bytesRead;
        while ((bytesRead = fis.read(input)) != -1) {
            byte[] output = cipher.update(input, 0, bytesRead)
            if (output != null) {
                fos.write(output)
            }
        }
        byte[] output = cipher.doFinal()
        if (output != null) {
            fos.write(output)
        }
        fis.close()
        fos.flush()
        fos.close()

        println it.getAbsolutePath()
    }
}

project.afterEvaluate {
    preBuild.dependsOn encryptAssets
}